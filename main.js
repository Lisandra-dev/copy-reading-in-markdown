/** GENERATED BY OBSIDIAN-PLUGIN-CLI, DO NOT EDIT */
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => CopyReadingInMarkdown
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {};
var CopyReadingInMarkdown = class extends import_obsidian.Plugin {
  createNumeroteList(div, type) {
    const allLi = div.querySelectorAll("li");
    let allHaveDataLine = true;
    for (const li of allLi) {
      if (!li.hasAttribute("data-line")) {
        allHaveDataLine = false;
        break;
      }
    }
    if (allHaveDataLine) {
      const ol = document.createElement(type);
      for (const li of allLi) {
        ol.appendChild(li);
      }
      div.innerHTML = "";
      div.appendChild(ol);
    }
    return div;
  }
  getSelectionHasHTML() {
    const range = activeWindow.getSelection().getRangeAt(0);
    const fragment = range.cloneContents();
    let div = document.createElement("div");
    div.appendChild(fragment);
    const commonAncestor = range.commonAncestorContainer;
    if (commonAncestor.nodeName === "OL" || commonAncestor.nodeName === "UL") {
      const type = commonAncestor.nodeName.toLowerCase();
      div = this.createNumeroteList(div, type);
    }
    const md = (0, import_obsidian.htmlToMarkdown)(div.innerHTML);
    return md;
  }
  getIframeSelectionHasHTML() {
    var _a;
    const activeCanvas = this.app.workspace.getActiveViewOfType(import_obsidian.ItemView);
    const canvasHTML = activeCanvas == null ? void 0 : activeCanvas.contentEl;
    const iframe = canvasHTML == null ? void 0 : canvasHTML.querySelector("iframe");
    const iframeSelection = (iframe == null ? void 0 : iframe.contentWindow) || (iframe == null ? void 0 : iframe.contentDocument);
    const iframeSelectedText = (_a = iframeSelection == null ? void 0 : iframeSelection.getSelection()) == null ? void 0 : _a.toString();
    if (iframeSelectedText) {
      return iframeSelectedText;
    } else {
      return this.getSelectionHasHTML();
    }
  }
  async onload() {
    console.log(`CopyReadingInMarkdown v.${this.manifest.version} loaded.`);
    await this.loadSettings();
    this.addCommand({
      id: "copy-reading-in-markdown",
      name: "Copy Reading in Markdown",
      callback: () => {
        var _a;
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        let selectedText = "";
        if (activeView && activeView.getMode() !== "source") {
          selectedText = this.getSelectionHasHTML();
        } else if (activeView) {
          selectedText = activeWindow.getSelection().toString();
        } else {
          const leafType = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.ItemView)) == null ? void 0 : _a.getViewType();
          if (leafType === "canvas") {
            selectedText = this.getIframeSelectionHasHTML();
          }
        }
        if (selectedText) {
          navigator.clipboard.writeText(selectedText);
        }
      }
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
